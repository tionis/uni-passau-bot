#!/bin/env bash
#--------------------------------------------
set -Eeuo pipefail
if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
trap stack_trace ERR
function stack_trace() {
  echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:\nStack Trace:"
  for (( i = 1; i < ${#FUNCNAME[@]}; i++ )); do
  echo "    ($i) ${FUNCNAME[$i]:-(top level)} ${BASH_SOURCE[$i]:-(no file)}:${BASH_LINENO[$(( i - 1 ))]}"
  done
}
error(){ printf "\e[1;31m[ERROR]\e[0m %s\n" "${1:-error message missing}" && trap true ERR && return 1; }
warning(){ printf "\e[1;33m[WARNING]\e[0m %s\n" "$1" >&2; }
success(){ printf "\e[1;32m[SUCCESS]\e[0m %s\n" "$1" >&2; }
info(){ printf "\e[1;34m[INFO]\e[0m %s\n" "$1" >&2; }
green(){ if [[ -t 0 ]]; then printf "\e[1;32m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
red(){ if [[ -t 0 ]]; then printf "\e[1;31m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
blue(){ if [[ -t 0 ]]; then printf "\e[1;34m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
export SCRIPT_DIR
#--------------------------------------------
declare -A uni_passau_bot__commands
declare -A uni_passau_bot__command_descriptions
uni-passau-bot::desc(){
  uni_passau_bot__commands["$1"]="$1"
  uni_passau_bot__command_descriptions["$1"]="$2"
}
declare -A uni_passau_bot__aliases
uni-passau-bot::alias(){
  uni_passau_bot__aliases["$1"]+="|$2"
  uni_passau_bot__commands["$2"]="$1"
}
uni-passau-bot::desc help "Show this help message"
uni-passau-bot::help(){
  case "${1:-list}" in
    */)
      printf "Group Commands for %s:\n" "$(green "${1}")"
      for key in "${!uni_passau_bot__command_descriptions[@]}"; do
        if [[ "$key" == "${1}"?* ]]; then
          local name_without_group="${key:${#1}}"
          if [[ ( ! "$name_without_group" == */* ) \
             || "$name_without_group" =~ ^[a-zA-Z0-9]+/$ ]]; then
            if [[ -v uni_passau_bot__aliases[$key] ]]; then
              printf "  %s: %s\n" \
                     "$(green "$key${uni_passau_bot__aliases[$key]}")" \
                     "${uni_passau_bot__command_descriptions[$key]}"
            else
              printf "  %s: %s\n" \
                     "$(green "$key")" \
                     "${uni_passau_bot__command_descriptions[$key]}"
            fi
          fi
        fi
      done
      ;;
    list)
      echo "Usage: uni-passau-bot [command]"
      echo "Commands:"
      for key in "${!uni_passau_bot__command_descriptions[@]}"; do
        if [[ ( ! "$key" == */* ) \
           || "$key" =~ ^[a-zA-Z0-9_.-]+/$ ]]; then
          if [[ -v uni_passau_bot__aliases[$key] ]]; then
            printf "  %s: %s\n" \
                   "$(green "$key${uni_passau_bot__aliases[$key]}")" \
                   "${uni_passau_bot__command_descriptions[$key]}"
          else
            printf "  %s: %s\n" \
                   "$(green "$key")" \
                   "${uni_passau_bot__command_descriptions[$key]}"
          fi
        fi
      done
      ;;
    *)
      if [[ -v uni_passau_bot__command_descriptions[$1] ]]; then
        printf "Usage: uni-passau-bot %s\n" "$(green "$1")"
        if [[ -v uni_passau_bot__aliases[$1] ]]; then
          printf "Aliases: %s\n" "$(green "${uni_passau_bot__aliases[$1]//|/ }")"
        fi
        printf "%s\n" "${uni_passau_bot__command_descriptions[$1]}"
      else
        error "Unknown command: $1"
      fi
      ;;
  esac
}

uni-passau-bot(){
  local base_zero
  base_zero="$(basename "$0")"
  if [[ "$base_zero" = ".main" || "$base_zero" = "uni-passau-bot" ]]; then
    command="${1:-help}"
    shift || true
  else
    command="$base_zero"
  fi
  if [[ "$command" == */ ]]; then
    "uni-passau-bot::help" "$command" "$@"
  elif [[ -v uni_passau_bot__commands[$command] ]]; then
    "uni-passau-bot::${uni_passau_bot__commands[$command]}" "$@"
  else
    error "Unknown command: $command"
  fi
}

######################################### Commands ##########################################
uni-passau-bot::desc bins "Build binaries for release"
uni-passau-bot::bins(){
  export GOOS
  export GOARCH
  #export CGO_ENABLED=1
  local goos_goarch_combinations=(
    "darwin/amd64"
    "darwin/arm64"
    "freebsd/386"
    "freebsd/amd64"
    "freebsd/arm"
    "freebsd/arm64"
    "js/wasm"
    "linux/386"
    "linux/amd64"
    "linux/arm"
    "linux/arm64"
    "linux/mips"
    "linux/mips64"
    "linux/mipsle"
    "netbsd/386"
    "netbsd/amd64"
    "netbsd/arm"
    "netbsd/arm64"
    "openbsd/386"
    "openbsd/amd64"
    "openbsd/arm"
    "windows/386"
    "windows/amd64"
    "windows/arm"
  )
  for combination in "${goos_goarch_combinations[@]}"; do
    local file_ext=""
    case "$combination" in
      windows/*) file_ext=".exe" ;;
    esac
    GOOS="${combination%/*}"
    GOARCH="${combination#*/}"
    info "Building for $combination"
    go build -o "bins/uni-passau-bot-$GOOS-$GOARCH$file_ext"
  done
}


# Run main if not sourced
if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    uni-passau-bot "$@"
fi
